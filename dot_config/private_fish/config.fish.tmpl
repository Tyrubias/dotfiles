fish_config theme choose "Dracula Official"

set -g fish_greeting

set -gx BAT_THEME Dracula
set -gx HOMEBREW_BAT true
set -gx EDITOR nvim
set -gx VISUAL nvim
set -gx NVM_AUTO_USE true
set -gx NVM_LAZY_LOAD true
set -gx XDG_CONFIG_HOME {$HOME}/.config
set -gx XDG_CACHE_HOME {$HOME}/.cache
set -gx XDG_DATA_HOME {$HOME}/.local/share
set -gx XDG_STATE_HOME {$HOME}/.local/state
set -gx BORG_REMOTE_PATH borg1

set -gx PIP_REQUIRE_VIRTUALENV true
set -gx VIRTUAL_ENV_DISABLE_PROMPT true

set -gx HOMEBREW_NO_ENV_HINTS true

set -gx VCPKG_ROOT {$HOME}/Downloads/vcpkg

{{- if (and (eq .chezmoi.os "linux") (not (.chezmoi.kernel.osrelease | lower | contains "microsoft"))) }}
set -gx DOCKER_HOST "unix://$XDG_RUNTIME_DIR/docker.sock"
{{ end }}

# set -Ux MISE_FISH_AUTO_ACTIVATE 0
{{- if eq .chezmoi.os "darwin" }}
if not status is-interactive; and test -f /opt/homebrew/bin/mise
    /opt/homebrew/bin/mise activate fish --shims | source
end
{{ else }}
if not status is-interactive; and test -f /home/linuxbrew/.linuxbrew/bin/mise
    /home/linuxbrew/.linuxbrew/bin/mise activate fish --shims | source
end
{{ end -}}
if test -e "$HOME/.secrets.fish"
    source "$HOME/.secrets.fish"
end

if status is-interactive
    # Commands to run in interactive sessions can go here
    fzf_configure_bindings --directory=\cf
{{ if eq .chezmoi.os "darwin" }}
    /opt/homebrew/bin/brew shellenv | source

    rbenv init - fish | source

    if $HOME/.iterm2/it2check
        test -e {$HOME}/.iterm2_shell_integration.fish ; and source {$HOME}/.iterm2_shell_integration.fish
    end

    bind \eX 'commandline | pbcopy'
{{ else }}
    /home/linuxbrew/.linuxbrew/bin/brew shellenv | source

    bind \eX 'commandline | xclip -selection clipboard'
{{ end }}
    if set -q KITTY_INSTALLATION_DIR
        set --global KITTY_SHELL_INTEGRATION enabled
        source "$KITTY_INSTALLATION_DIR/shell-integration/fish/vendor_conf.d/kitty-shell-integration.fish"
        set --prepend fish_complete_path "$KITTY_INSTALLATION_DIR/shell-integration/fish/vendor_completions.d"
        bind \eQ 'clone-in-kitty --type=tab'
    end

    if set -q GHOSTTY_RESOURCES_DIR
        builtin source "$GHOSTTY_RESOURCES_DIR/shell-integration/fish/vendor_conf.d/ghostty-shell-integration.fish"
    end

    mise activate fish | source

    fish_add_path --prepend --global $HOME/.local/bin

    if test -d $HOME/.cargo/bin
        fish_add_path --prepend --global $HOME/.cargo/bin
    end

    if type -q atuin
        atuin init fish | source
    end

    if type -q direnv
        direnv hook fish | source
    end
{{ if eq .chezmoi.os "darwin" }}
    if test -f /opt/homebrew/Caskroom/miniforge/base/bin/conda
        eval /opt/homebrew/Caskroom/miniforge/base/bin/conda "shell.fish" "hook" $argv | source
    else
        if test -f "/opt/homebrew/Caskroom/miniforge/base/etc/fish/conf.d/conda.fish"
            . "/opt/homebrew/Caskroom/miniforge/base/etc/fish/conf.d/conda.fish"
        else
            set -x PATH "/opt/homebrew/Caskroom/miniforge/base/bin" $PATH
        end
    end
{{ else if (and (eq .chezmoi.os "linux") (not (.chezmoi.kernel.osrelease | lower | contains "microsoft"))) }}
    if test -f /home/vsong/miniforge3/bin/conda
        eval /home/vsong/miniforge3/bin/conda "shell.fish" "hook" $argv | source
    else
        if test -f "/home/vsong/miniforge3/etc/fish/conf.d/conda.fish"
            . "/home/vsong/miniforge3/etc/fish/conf.d/conda.fish"
        else
            set -x PATH "/home/vsong/miniforge3/bin" $PATH
        end
    end
{{ end -}}
end
